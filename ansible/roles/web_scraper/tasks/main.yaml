

- name: Make sure holding directory exists
  file:
    path: '{{ working_dir }}'
    state: directory

- name: copy environment file over 
  copy:
    src: "{{ source_dir }}/environment.yml"
    dest: '{{ working_dir }}/environment.yml'
  register: env_file


# if the environment has changed, then trash the old and rebuild
- name: Clean artifact path
  file:
    state: absent
    path: "{{ working_dir }}/env"
  when: env_file.changed

- name: Make sure holding directory exists
  file:
    path: '{{ working_dir }}/env'
    state: directory
  when: env_file.changed

- name: build local conda environment
  command: "{{ conda_bin }} env create -p={{ working_dir }}/env -f={{ working_dir }}/environment.yml"
  run_once: True
  register: output
  when: env_file.changed


- name: setup logrotate
  template:
    src: logrotate.conf.j2
    dest: "{{ working_dir }}/logrotate.conf"
  register: logrotate

- name: Setup logrotate for webscraper
  cron: 
    minute: "0"
    hour: "0"
    name: "logrotate for {{ cron_name }}"
    job: "logrotate {{ working_dir }}/logrotate.conf -s {{ working_dir }}/logrotate.log"
  
# Copy over config files and source directory
- name: copy config file over 
  copy:
    src: "{{ source_dir }}/configs/{{ config_file }}"
    dest: '{{ working_dir }}/{{ config_file }}'


# should really use a template here.
- name: replace download location text in config file
  replace:
    path: "{{ working_dir }}/{{ config_file }}"
    regexp: "'download_location': .*"
    replace: "'download_location': {{ download_location }}"


- name: copy over python source
  synchronize:
    src: "{{ source_dir }}/web_scraper"
    dest: "{{ working_dir }}"


- name: Setup Cron for hourly scrapes
  cron: 
    minute: "{{ cron_minute | default('3') }}"
    hour: "{{ cron_hour | default('*') }}"
    name: "Scraper for {{ cron_name }}"
    job: "{{ working_dir }}/env/bin/python {{ working_dir }}/web_scraper/scrape.py --config {{ working_dir }}/{{ config_file }} >> {{ log_file }} 2>&1"
